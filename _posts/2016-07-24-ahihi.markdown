---
published: true
title: Ahihi
layout: post
---
[writeup] ABCTF RacecaR – 100
Xời, nhìn thấy ngay 1 bài programming 100pts, nghĩ thầm chắc dễ ăn nên bắt tay vào quẩy luôn :))

Đề bài rất ngắn gọn như thế này:

palindrome

Palindromes ???? đọc đề xong đúng kiểu wtf, đứng hình trong 5s luôn. Ngay lập tức dùng kĩ năng tối thượng GOOGLE xem cái cục kia nghĩa là gì.

Chẹp, kết quả trả về trên Wiki như sau :

A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward.  Examples in English include “A man, a plan, a canal, Panama!”, “Amor, Roma”, “race car”, “stack cats”, “step on no pets”, “taco cat”, “put it up”, “Was it a car or a cat I saw?” and “No ‘x’ in Nixon”.

Ờ rồi, đọc xuôi hay ngược nó đều như nhau chứ gì. Bước tiếp chắc là sẽ xem mặt ngang mũi dọc cái file palindrome.txt đề bài cho xem ntn nhể.

palin3

Nhìn đề xong nghĩ thầm, sao trên đời lại có mấy bài dễ ntn k biết. Đơn giản chỉ cần so sánh mỗi dòng với cái reverse của nó thôi chứ gì, code luôn lấy 100pts còn đi làm bài khác :v

1
2
3
4
5
6
palindrome = []
with open('palindrome.txt','r') as f:
for line in f:
    if line == line[::-1]:
    palindrome.append(line)
print max(palindrome,key=len)
 

Ơ, lỗi, ơ đậu xanh😦. Chắc là mình hiểu sai vấn đề đâu đó rồi. Gặm bút cắn móng tay, gu gồ 1 lúc thì search được cái keyword SubPalindrome. Đến lúc này thì hiểu ra là các palindromes có thể là cả 1 dòng (như suy nghĩ ban đầu), hoặc phức tạp hơn là nó sẽ là các tập con của từng dòng.

Sh!t, TH1 thì fail rồi, vậy chắc chắn là TH2. Nếu như vậy thì sẽ phải kiểm tra khá nhiều lần trong 1 dòng vì có thể 1 dòng có tới vài sub-palin.

Chẹp, khó nhể. Xem có hint chưa cái😥

palin4.png

Ơn giời được cứu rồi. Vậy là đã có người viết xong cái thuật toán này rồi. Việc của mình bây giờ là dùng mọi thủ đoạn đi tìm xem có cái python-lib nào không, có thì quẩy thôi.

Và rồi ok, mình tìm thấy 1 thư viện rất hữu dụng ở đây http://tarokuriyama.com/projects/palindrome2.php

Trong đó có 1 hàm ntn :

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
def longest_sp(string, delim='|'):
    &amp;amp;amp;amp;quot;&amp;amp;amp;amp;quot;&amp;amp;amp;amp;quot;Find longest SP within given string.
    Returns
    tuple of ints (start, end), which return the longest SP
    when used to slice string[start: end]
    &amp;amp;amp;amp;quot;&amp;amp;amp;amp;quot;&amp;amp;amp;amp;quot;
    len_sps = find_sps(string, delim)
    longest = max(len_sps)
 
    # account for presence of delimeters; int takes floor of float
    ctr_ind = int(len_sps.index(longest) / 2)
    half_word = int(longest / 2)
 
    start, end = ctr_ind - half_word, ctr_ind + half_word
    end += 0 if longest % 2 == 0 else 1
 
    return start, end
Vậy là mình sẽ sử dụng function này vào việc tìm ra flag của bài. Ngồi chỉnh sửa lại đoạn code ban đầu cho đỡ phí :)). Thành quả đây:

 

1
2
3
4
5
6
7
8
palindromes = []
with open('palindrome.txt','r') as f:
    for line in f:
        start, end = longest_sp(line)
        pal = line[start:end]
        palindromes.append(pal)
print palindromes
print max(palindromes,key=len)
RUN ITTTTTTTTTTTTTTTTT :v
palin5.png

100pts cũng không dễ như mình nghĩ nhở, hơi chủ quan tí may là sửa chữa kịp thời, lol.

FLAG :

DbrMrbD

End.

Thank you for paying your time.

– Chàng pháp sư trẻ tuổi Khadgar –